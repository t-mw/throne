fall-timer 0.25 . default-fall-timer 0.25 . block-id 0 . max-width 10 . max-height 10

#tick . !shape X Y BLOCKS = #new-shape
#tick . $shape X Y BLOCKS = #input-u

#new-shape = new-shape 6 10 ((block -1 0) ((block 0 0) ((block 1 0) ((block 0 1) (cons))))) . #shape-to-blocks (#input-lr)
#new-shape = new-shape 6 10 ((block 0 -1) ((block 0 0) ((block 0 1) (cons)))) . #shape-to-blocks (#input-lr)
#new-shape = new-shape 6 10 ((block 0 -1) ((block 0 0) ((block 0 1) ((block 1 1) (cons))))) . #shape-to-blocks (#input-lr)

#shape-to-blocks RETURN:
  block-falling ID X Y =
  $new-shape X Y BLOCKS . !BLOCKS = BLOCKS
  () = #shape-to-blocks-create RETURN

#shape-to-blocks-create RETURN:
  $new-shape X Y BLOCKS . (block DX DY) BLOCK . block-id ID . + ID 1 ID2 . + X DX X1 . + Y DY Y1 = block-falling ID X1 Y1 . block-id ID2 . BLOCK
  () = #shape-to-blocks-check RETURN

#shape-to-blocks-check RETURN . block-falling ID X Y . $block-set ID2 X Y = #shape-to-blocks-fail RETURN
#shape-to-blocks-check RETURN . block-falling ID X Y . < X 0 = #shape-to-blocks-fail RETURN
#shape-to-blocks-check RETURN . block-falling ID X Y . $max-width W . >= X W = #shape-to-blocks-fail RETURN
#shape-to-blocks-check RETURN . () = #shape-to-blocks-ok RETURN

#shape-to-blocks-ok RETURN:
  shape X Y BLOCKS =
  new-shape X Y BLOCKS . () = shape X Y BLOCKS . RETURN

#shape-to-blocks-fail RETURN:
  new-shape X Y BLOCKS =
  $shape X Y BLOCKS . () = new-shape X Y BLOCKS . #shape-to-blocks RETURN

#input-u . ^kp up = #rotate-shape
#input-u . () = #input-lr

#rotate-shape:
  $shape X Y BLOCKS . !new-shape X Y BLOCKS2  = new-shape X Y BLOCKS . new-blocks (cons)
  new-shape X Y ((block DX DY) BLOCKS) . new-blocks BLOCKS2 . + DX2 DX 0 = new-shape X Y BLOCKS . new-blocks ((block DY DX2) BLOCKS2)
  new-shape X Y BLOCKS . new-blocks BLOCKS2 . () = new-shape X Y BLOCKS2 . #shape-to-blocks (#input-d)

#input-lr . ^kp left . $shape X Y BLOCKS . + X1 1 X = new-shape X1 Y BLOCKS . #shape-to-blocks (#input-d)
#input-lr . ^kp right . $shape X Y BLOCKS . + X 1 X1 = new-shape X1 Y BLOCKS . #shape-to-blocks (#input-d)
#input-lr . () = #input-d

#input-d:
  ^kd down . default-fall-timer 0.25 . fall-timer TIMER = default-fall-timer 0.05 . fall-timer 0
  ^ku down . default-fall-timer 0.05 . fall-timer TIMER = default-fall-timer 0.25 . fall-timer 0
  () = #collision

#collision:
  block-falling ID X Y . + Y1 1 Y . $block-set ID2 X Y1 = block-setting ID X Y
  block-falling ID X Y . + Y1 1 Y . < Y1 0 = block-setting ID X Y
  $block-setting ID X Y . block-falling ID2 X1 Y1 = block-setting ID2 X1 Y1
  $block-setting ID X Y . shape X1 Y1 BLOCKS =
  () = #set

#set:
  block-setting ID X Y = block-set ID X Y
  $max-width W . () = #score-x . score-counter W 0

#score-x . score-counter X Y . + X1 1 X . $block-set ID X1 Y = score-counter X1 Y . #score-x
#score-x . score-counter 0 Y = #clear . clear-y Y
#score-x . $score-counter X Y . () = #score-y

#score-y . score-counter X Y . + Y 1 Y1 . $max-width W . $max-height H . < Y1 H = score-counter W Y1 . #score-x
#score-y . score-counter X Y . () = #fall-tick

#clear:
  $clear-y Y . block-set ID X Y =
  block-clear-move ID =
  () = #clear-move

#clear-move:
  $clear-y Y . block-set ID X Y1 . !block-clear-move ID . > Y1 Y . + Y2 1 Y1 = block-set ID X Y2 . block-clear-move ID
  $max-width W . clear-y Y . () = #score-x . score-counter W 0

#fall-tick . fall-timer TIMER . >= TIMER 0 . $dt DT . + TIMER2 DT TIMER . >= TIMER2 0 = fall-timer TIMER2 . #clean
#fall-tick . fall-timer TIMER . >= TIMER 0 . $dt DT . + TIMER2 DT TIMER . < TIMER2 0 . $default-fall-timer D = fall-timer D . #fall

#fall . shape X Y BLOCKS . + Y1 1 Y = new-shape X Y1 BLOCKS . #shape-to-blocks (#clean)
#fall . () = #clean

#clean:
  dt DT =
  cons =
  () =